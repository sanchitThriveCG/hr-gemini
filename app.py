# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

import sys
import traceback
import uuid
from datetime import datetime
from http import HTTPStatus

from aiohttp import web
from aiohttp.web import Request, Response, json_response
from bot import MyBot
from botbuilder.core import (
    BotFrameworkAdapterSettings,
    TurnContext,
    BotFrameworkAdapter,
)
from botbuilder.core.integration import aiohttp_error_middleware
from botbuilder.schema import Activity, ActivityTypes

from bots import TeamsConversationBot
from config import DefaultConfig

CONFIG = DefaultConfig()

# Create adapter.
# See https://aka.ms/about-bot-adapter to learn more about how bots work.
SETTINGS = BotFrameworkAdapterSettings('bcf17d5e-1f5d-426a-918b-447d2eb766cf', 'y3I8Q~G1P963WGoKFJFif~RlyrSvV1C-BbmBAbOP')
ADAPTER = BotFrameworkAdapter(SETTINGS)


# Catch-all for errors.
async def on_error(context: TurnContext, error: Exception):
    # This check writes out errors to console log .vs. app insights.
    # NOTE: In production environment, you should consider logging this to Azure
    #       application insights.
    print(f"\n [on_turn_error] unhandled error: {error}", file=sys.stderr)
    traceback.print_exc()

    # Send a message to the user
    await context.send_activity("The bot encountered an error or bug.")
    await context.send_activity(
        "To continue to run this bot, please fix the bot source code."
    )
    # Send a trace activity if we're talking to the Bot Framework Emulator
    if context.activity.channel_id == "emulator":
        # Create a trace activity that contains the error object
        trace_activity = Activity(
            label="TurnError",
            name="on_turn_error Trace",
            timestamp=datetime.utcnow(),
            type=ActivityTypes.trace,
            value=f"{error}",
            value_type="https://www.botframework.com/schemas/error",
        )
        # Send a trace activity, which will be displayed in Bot Framework Emulator
        await context.send_activity(trace_activity)


ADAPTER.on_turn_error = on_error

# If the channel is the Emulator, and authentication is not in use, the AppId will be null.
# We generate a random AppId for this case only. This is not required for production, since
# the AppId will have a value.
APP_ID = SETTINGS.app_id if SETTINGS.app_id else uuid.uuid4()

# Create the Bot
# BOT = TeamsConversationBot(CONFIG.APP_ID, CONFIG.APP_PASSWORD)
print('hiiiiii')
BOT = MyBot('bcf17d5e-1f5d-426a-918b-447d2eb766cf', 'y3I8Q~G1P963WGoKFJFif~RlyrSvV1C-BbmBAbOP')
# BOT = MyBot()
print('byeeeeee', BOT)

# Listen for incoming requests on /api/messages.
async def messages(req: Request) -> Response:
    if "application/json" in req.headers["Content-Type"]:
        body = await req.json()
    else:
        return Response(status=HTTPStatus.UNSUPPORTED_MEDIA_TYPE)

    # Deserialize the incoming activity
    activity = Activity().deserialize(body)

    # Debugging: Print out the incoming activity (message)
    print("Received activity:")
    print(f"From: {activity.from_property.name}")
    print(f"Message: {activity.text}")

    # Check if the message text is None or empty
    if not activity.text:
        print("Received activity with no message text.")
        return Response(status=HTTPStatus.BAD_REQUEST, text="No message text received.")

    # Extract authorization header
    auth_header = req.headers["Authorization"] if "Authorization" in req.headers else ""

    try:
        # Process the activity with the Bot Adapter
        response = await ADAPTER.process_activity(activity, auth_header, BOT.on_turn)

        # Check if response is None
        if response is None:
            print("No response generated by bot.")
            return Response(status=HTTPStatus.NO_CONTENT)

        # Debugging: Check the response body and log it
        print("Response from bot:")
        if hasattr(response, 'body'):
            print(f"Response body: {response.body}")
        else:
            print("No body attribute in response.")
        
        return json_response(data=response.body, status=response.status)
    
    except Exception as e:
        print(f"Error processing activity: {e}")
        return Response(status=HTTPStatus.INTERNAL_SERVER_ERROR)

APP = web.Application(middlewares=[aiohttp_error_middleware])
APP.router.add_post("/api/messages", messages)

if __name__ == "__main__":
    try:
        web.run_app(APP, host="localhost", port=CONFIG.PORT)
    except Exception as error:
        raise error
